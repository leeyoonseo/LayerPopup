{"version":3,"sources":["layerPopup.js"],"names":["LayerPopup","parameters","callbackFunc","type","_classCallCheck","this","name","options","appendPosition","className","title","content","button","dim","scroll","expire","expireData","date","id","closeButtonData","src","label","customButton","customButtonData","event","Object","assign","callback","console","_this","_this$options","closeButton","_createElement","wrap","container","wrapInner","querySelector","document","header","tag","closeLabel","buttonsWrap","that","_this$options2","call","Array","isArray","length","map","e","key","_getRandomNumber","el","append","btn","defaultButtons","prefix","expireBox","expireWrap","_ref","expireBtn","expireLabel","done","cancel","_setAttribute","_layoutAppend","_ref2$tag","_ref2","_ref2$type","_ref2$label","text","_ref2$expire","createElement","splitClassName","split","classList","add","innerText","setAttribute","style","backgroundImage","value","dataset","_this$wrap","zIndex","_this$options3","footer","_setContent","target","body","_this$options4","outputTitle","wordBreak","org","arguments","undefined","dest","join","outputContent","innerHTML","_this2","_this$options5","addEventListener","close","childNodes","defaultButtonCaller","from","buttonNodes","find","_handleDefaultClick","log","handleCheckbox","_ref4","_ref5","tagName","toLowerCase","checked","_ref3","_ref6","buttons","_ref7","result","search","_ref8","_handleExpire","btnClass","day","floor","Math","random","isState","removeProperty","overflow","_setCookie","uniqueName","days","Date","num","setDate","getDate","cookie","escape","toUTCString","match","_this$options6","_setBodyScroll","otherPopup","querySelectorAll","contains","Number","isExpireState","child","_this$options7","remove","_getCookie","layer","i","setZindex","_ref9","_ref10"],"mappings":"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","file":"layerPopup.min.js","sourcesContent":["// dev 옵션 - min파일에서 디버깅\r\n// require('source-map-support').install();\r\n/**\r\n * @author yoonseo.lee <okayoon.lee@gmail.com>\r\n * @version 1.0.0\r\n * @since 2019.11\r\n * @file 레이어팝업 플러그인\r\n * @copyright yoonseo.lee 2019.11\r\n */\r\nclass LayerPopup{\r\n\r\n    /**\r\n     * 레이어팝업 \r\n     * @classdesc 생성, 삽입, 삭제, 커스텀이 가능한 레이어팝업 모듈\r\n     * @param {object} parameters - 옵션 \r\n     * @param {requestCallback} callbackFunc - 기본 버튼 클릭 시 실행될 콜백함수 \r\n     */\r\n    constructor(parameters, callbackFunc){\r\n        \r\n        /**\r\n         * @prop {string} name 클래스 생성자 이름\r\n         */\r\n        this.name = \"LayerPopup\";        \r\n\r\n        /**\r\n         * @abstract\r\n         * @prop {object} options 클래스 옵션 오브젝트 \r\n         * @prop {string} options.appendPosition 팝업이 삽입될 상위 객체의 tagName or id or class\r\n         * @prop {string} options.className 팝업의 클래스명\r\n         * @prop {string} options.title 타이틀 문구 \r\n         * @prop {string|object} options.content 내부 콘텐츠  \r\n         * @prop {boolean} options.button 기본 버튼 사용여부 \r\n         * @prop {boolean} options.dim 딤 배경처리 사용여부\r\n         * @prop {boolean} options.scroll 딤 배경처리 시 스크롤 사용여부\r\n         * @prop {boolean} options.expire 만료일 사용여부\r\n         * @prop {object} options.expireData 만료일 관련 데이터 \r\n         * @prop {string|number} options.expireData.date 만료일 날짜 \r\n         * @prop {string} options.expireData.id 만료일 체크 객체 id \r\n         * @prop {string} options.expireData.label 만료일 체크 label 문구\r\n         * @prop {boolean} options.closeButton 닫기 버튼 사용여부\r\n         * @prop {object} options.closeButtonData 닫기버튼 데이터 \r\n         * @prop {string} options.closeButtonData.src 닫기버튼 이미지 처리시 src \r\n         * @prop {string} options.closeButtonData.label 닫기버튼명\r\n         * @prop {boolean} options.customButton 커스텀 버튼 사용여부\r\n         * @prop {object} options.customButtonData 커스텀 버튼 데이터 \r\n         * @prop {string} options.customButtonData.type 커스텀 버튼 타입 \r\n         * @prop {string} options.customButtonData.className 커스텀 버튼 클래스 \r\n         * @prop {string} options.customButtonData.label 커스텀 버튼 label\r\n         * @prop {string|object} options.customButtonData.event 커스텀 버튼 클릭시 커스텀 이벤트\r\n         */\r\n        this.options = {\r\n            appendPosition : 'body', \r\n            className : 'popup', \r\n            title : 'title',\r\n            content : 'please write your message...',\r\n            \r\n            button : true,\r\n            dim : true,\r\n            scroll : true,\r\n            \r\n            expire : false,           \r\n            expireData : {\r\n                date : 1,\r\n                id : 'day',\r\n                label : '하루동안보지않기'\r\n            },\r\n\r\n            closeButton : true,\r\n            closeButtonData : {\r\n                src : '',\r\n                label : 'x'\r\n            },\r\n\r\n            customButton : false,\r\n            customButtonData : [\r\n                {\r\n                    type : '',\r\n                    className : '',\r\n                    label : '',\r\n                    event : '',\r\n                }\r\n            ]\r\n        };\r\n\r\n        if(parameters){\r\n            if(typeof parameters === 'object'){\r\n                this.options = Object.assign({}, this.options, parameters);\r\n                this.callback = callbackFunc || '';\r\n    \r\n            }else if(typeof parameters === 'function'){\r\n                this.callback = parameters;\r\n    \r\n            }else{\r\n                console.log('error : 옵션 값을 확인해주세요.');\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        this._initialize();\r\n    }   \r\n\r\n    /**\r\n     * 레이어 팝업 객체 생성 및 삽입 컨트롤\r\n     * @this LayerPopup\r\n     */\r\n    _initialize(){\r\n        const {\r\n            className, \r\n            closeButton, \r\n            closeButtonData, \r\n            button, \r\n            customButton,\r\n            title, \r\n            dim, \r\n            expire, \r\n            expireData\r\n        } = this.options;\r\n\r\n        const _createElement = this._createElement;\r\n\r\n        this.wrap = _createElement({\r\n            className : className + '_wrap',\r\n            expire\r\n        });    \r\n\r\n        this.wrapInner = _createElement({\r\n            className : className + '_inner',\r\n            expire\r\n        });           \r\n\r\n        this.container = _createElement({\r\n            className : className + '_container',\r\n            expire\r\n        });        \r\n\r\n        this.content = _createElement({\r\n            tag : 'div', \r\n            className : className + '_content',\r\n            expire\r\n        });\r\n        \r\n        this.dim = document.querySelector('[data-type=\"dim\"]');\r\n\r\n        if(dim && !this.dim) {\r\n            this.dim = _createElement({\r\n                className : className + '_dim',\r\n                expire\r\n            });\r\n        }\r\n\r\n        if(title || closeButton){\r\n            this.header = _createElement({\r\n                className : className + '_header',\r\n                expire\r\n            });\r\n        }\r\n\r\n        if(title) {\r\n            this.title = _createElement({\r\n                tag : 'p', \r\n                className : className + '_title',\r\n                expire\r\n            });\r\n        }\r\n\r\n        if(closeButton){\r\n            const closeLabel = (closeButtonData.label === '') \r\n                ? 'x' \r\n                : closeButtonData.label;\r\n\r\n            this.closeButton = _createElement({\r\n                tag : 'button',\r\n                className : className + '_close',\r\n                label : closeLabel,\r\n                src : closeButtonData.src,\r\n                expire\r\n            });\r\n        }\r\n\r\n        if(button || expire){\r\n            this.buttonsWrap = _createElement({\r\n                tag : 'div', \r\n                className : className + '_buttons_wrap',\r\n                expire\r\n            });\r\n\r\n            this.footer = _createElement({\r\n                className : className + '_footer',\r\n                expire\r\n            });\r\n        }\r\n\r\n        if(button){\r\n            if(customButton){\r\n                const that = this;\r\n                const {customButtonData, expire} = this.options;\r\n    \r\n                if(customButtonData === ''){\r\n                    defaultButtons.call(this);\r\n    \r\n                }else if(Array.isArray(customButtonData) && customButtonData.length > 1){\r\n                    customButtonData.map(e => {\r\n                        let key = this._getRandomNumber();\r\n                        e.key = key;\r\n    \r\n                        let el = _createElement.call(that, { \r\n                            tag : 'button', \r\n                            type : e.type, \r\n                            className : (e.className) ? e.className : key,                         \r\n                            label : e.label,\r\n                            expire\r\n                        });\r\n    \r\n                        that.buttonsWrap.append(el);\r\n                    });                \r\n    \r\n                }else{\r\n                    const key = this._getRandomNumber();\r\n                    let btn = (Array.isArray(customButtonData)) \r\n                        ? customButtonData[0] \r\n                        : customButtonData;\r\n                    const {type, className, label, event} = btn;\r\n                    btn.key = key;\r\n\r\n                    const el = _createElement.call(this, { \r\n                        tag : 'button', \r\n                        type : type, \r\n                        className : (className) ? className : key, \r\n                        label : label,\r\n                        expire\r\n                    });\r\n                    \r\n                    this.buttonsWrap.append(el);\r\n                }\r\n    \r\n            }else{\r\n                defaultButtons.call(this);\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            const {className} = this.options;\r\n            const prefix = className + '_expire';\r\n            let expireBox, \r\n                expireBtn, \r\n                expireLabel;\r\n\r\n            this.expireWrap = _createElement.call(this,{\r\n                tag : 'div',\r\n                className : prefix + '_wrap',\r\n                expire\r\n            });\r\n\r\n            if(Array.isArray(expireData)){\r\n                const that = this;\r\n\r\n                expireData.map(({className, id, date, label}) => {\r\n                    expireBox = _createElement.call(that, {\r\n                        tag : 'p', \r\n                        className : prefix + '_box',\r\n                        expire\r\n                    }); \r\n\r\n                    expireBtn = _createElement.call(that, {\r\n                        tag : 'input',\r\n                        type : 'checkbox', \r\n                        name : prefix + '_chk', \r\n                        className : className, \r\n                        id : id,\r\n                        label : date,\r\n                        expire\r\n                    });\r\n\r\n                    expireLabel = _createElement.call(that,{\r\n                        tag : 'label',\r\n                        label : prefix + '_label', \r\n                        id : id,\r\n                        text : label,\r\n                        expire\r\n                    });\r\n\r\n                    expireBox.append(expireBtn, expireLabel);\r\n                    this.expireWrap.append(expireBox);\r\n                });\r\n\r\n            }else{\r\n                expireBox = _createElement.call(this, {\r\n                    tag : 'p',\r\n                    className : prefix + '_box',\r\n                    expire\r\n                });\r\n\r\n                expireBtn = _createElement.call(this,{\r\n                    tag : 'input',\r\n                    type : 'checkbox', \r\n                    className : prefix + '_chk', \r\n                    id : expireData.id,\r\n                    label : expireData.date,\r\n                    expire\r\n                });\r\n\r\n                expireLabel = _createElement.call(this, {\r\n                    tag : 'label',\r\n                    label : prefix + '_label', \r\n                    id : expireData.id,\r\n                    text : expireData.label,\r\n                    expire\r\n                });\r\n\r\n                expireBox.append(expireBtn, expireLabel);\r\n                this.expireWrap.append(expireBox);\r\n            }\r\n        } // expired\r\n\r\n        this._setAttribute();\r\n        this._layoutAppend(); \r\n\r\n\r\n        // 기본 버튼 생성(확인, 취소)\r\n        function defaultButtons(){\r\n            this.done = _createElement.call(this, {\r\n                tag : 'button', \r\n                className : className + '_button_done', \r\n                type : 'submit',\r\n                label : 'confirm',\r\n                expire\r\n            });\r\n\r\n            this.cancel = _createElement.call(this, {\r\n                tag : 'button', \r\n                className : className + '_button_cancel', \r\n                label : 'cancel',\r\n                expire\r\n            });\r\n\r\n            this.buttonsWrap.append(this.done, this.cancel);\r\n        }\r\n    } // initialize\r\n\r\n\r\n    /**\r\n     * 객체 생성하는 함수, 버튼 생성할때는 호출 시 .call(this) 바인딩해줘야 함.\r\n     * @param {string} tag 객체 tagName (default = div)\r\n     * @param {string} id 객체 id\r\n     * @param {string} className  객체 class\r\n     * @param {string} name 객체 name\r\n     * @param {string} type 객체 종류 (default = button)\r\n     * @param {label} label label 텍스트 (default = 버튼)\r\n     * @param {string} src 버튼 이미지 주소\r\n     * @param {string} text 버튼 텍스트\r\n     * @return {object} 레이어팝업 객체\r\n     * @example\r\n     * title = _createElement({ \r\n     *      tag : 'p', \r\n     *      className : 'title,title-red,title-required' \r\n     * });\r\n     *      \r\n     * button = _createElement.call(this,{ \r\n     *      tag : 'button', \r\n     *      className : 'cancel',\r\n     *      type : 'button', \r\n     *      label : '취소버튼' \r\n     * });\r\n     */\r\n    _createElement({ \r\n        tag = 'div', \r\n        id, \r\n        className, \r\n        name, \r\n        type = 'button', \r\n        label = '버튼', \r\n        src,\r\n        text,\r\n        expire = false\r\n    }){\r\n\r\n        const el = document.createElement(tag);\r\n\r\n        if(className){\r\n            const splitClassName = className.split(',');\r\n\r\n            if(splitClassName.length > 1){\r\n                splitClassName.map(e =>  el.classList.add(e));\r\n\r\n            }else{\r\n                el.classList.add(className);\r\n            }\r\n        }\r\n\r\n        if(name){\r\n            el.name = name;\r\n        }\r\n\r\n        if(id && tag !== 'label'){\r\n            el.id = id;\r\n        }\r\n\r\n        if(tag === 'label' && text){\r\n            el.innerText = text;\r\n        }\r\n        \r\n        if(tag === 'button'){   \r\n            el.setAttribute('type', (type !== '') ? type : 'button');\r\n            el.LayerPopup = this;\r\n            el.innerText = (label !== '') ? label : '버튼';\r\n            \r\n            if(src && src !== ''){\r\n                el.style.backgroundImage = 'url(' + src + ')';\r\n                el.classList.add('bg');\r\n            }\r\n        }\r\n\r\n        if(expire){\r\n            if(type === 'radio' || type === 'checkbox'){\r\n                el.value = label;\r\n                el.setAttribute('type', type);\r\n                el.dataset.type = 'expired';\r\n                el.LayerPopup = this;\r\n            }\r\n            \r\n            if(tag === 'label'){       \r\n                el.setAttribute('for', id);\r\n            }\r\n        }\r\n\r\n        return el;\r\n    } // _createElement\r\n\r\n\r\n    /**\r\n     * 옵션에 따라 객체 속성 컨트롤\r\n     * @this LayerPopup\r\n     */\r\n    _setAttribute(){\r\n        const {dim} = this.options;\r\n        const {style, dataset} = this.wrap;\r\n\r\n        style.zIndex = 1000;\r\n        dataset.type = 'layerPopup';\r\n\r\n        if(dim) {\r\n            this.dim.dataset.type = 'dim';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 객체 삽입하는 함수\r\n     * @throws 선언 순서가 변경되면 안됨\r\n     */\r\n    _layoutAppend(){\r\n        const { appendPosition, title, dim, closeButton, button, expire, expireData} = this.options;\r\n\r\n        if(title){\r\n            this.header.append(this.title);\r\n        }\r\n\r\n        if(closeButton){\r\n            this.header.append(this.closeButton);\r\n        }\r\n\r\n        this.container.append(this.content);\r\n        \r\n        if(expire && expireData){\r\n            this.footer.append(this.expireWrap);\r\n        }\r\n\r\n        if(button || expire){\r\n            this.footer.append(this.buttonsWrap);\r\n        }\r\n\r\n        if(this.header){\r\n            this.wrapInner.append(this.header); \r\n        }\r\n\r\n        this.wrapInner.append(this.container); \r\n\r\n        if(button || expire){\r\n            this.wrapInner.append(this.footer); \r\n        }\r\n\r\n        this.wrap.append(this.wrapInner);\r\n        \r\n        this._setContent();\r\n        this._attachEvent();\r\n\r\n        if(appendPosition !== ''){\r\n            let target = document.querySelector(appendPosition); \r\n            if(target === '' || !target) {\r\n                target = document.querySelector('body');\r\n            }\r\n\r\n            target.append(this.wrap);\r\n        }\r\n\r\n        if(dim && this.dim) document.body.append(this.dim);\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 타이틀, 내부 콘텐츠 세팅해주는 함수\r\n     */\r\n    _setContent(){\r\n        const {title, content} = this.options;\r\n        let outputContent = content;\r\n        let outputTitle = content;\r\n\r\n        if(title) {\r\n            if(typeof title === 'string'){\r\n                outputTitle = wordBreak(title);\r\n                this.title.innerHTML = outputTitle;\r\n\r\n            }else{\r\n                this.title.append(outputTitle);\r\n            }\r\n        }\r\n\r\n        if(typeof content === 'string'){\r\n            outputContent = wordBreak(content);\r\n            this.content.innerHTML = outputContent;\r\n\r\n        }else{\r\n            this.content.append(outputContent);\r\n        }\r\n\r\n        /**\r\n         *  \\n를 <br>로 변환\r\n         * @param {string} text 줄바꿈 치환이 필요한 텍스트\r\n         * @param {string} org 기존 치환 문구\r\n         * @param {string} dest 치환되어야할 문구\r\n         * @return {string} (default) js 줄바꿈을 html 줄바꿈으로 치환한 텍스트\r\n         */\r\n        function wordBreak(text, org = '\\n', dest = '<br>'){\r\n            return text.split(org).join(dest);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 레이어 팝업 객체 이벤트 바인딩하는 함수\r\n     * @this LayerPopup\r\n     */\r\n    _attachEvent(){\r\n        const that = this;\r\n        const {closeButton, customButton, button, customButtonData, expire, expireData} = this.options;\r\n\r\n        if(closeButton){\r\n            this.closeButton.addEventListener('click', () => {\r\n                this.close();\r\n            });\r\n        }\r\n\r\n        if(button){\r\n            const buttonNodes = this.buttonsWrap.childNodes;        \r\n\r\n            if(customButton){\r\n                if(customButtonData === ''){\r\n                    defaultButtonCaller.call(this);\r\n    \r\n                }else if(customButtonData.length > 1){\r\n                    Array.from(buttonNodes).map(el => {\r\n                        customButtonData.find((e) => {\r\n                            if(e.event && typeof e.event === 'function'){\r\n                                if(el.className === e.key || el.className === e.className){\r\n                                    el.addEventListener('click', e.event);\r\n                                    el.event = e.event;\r\n                                }\r\n    \r\n                            }else{\r\n                                console.log('event가 비어있습니다. 기본이벤트로 대체합니다.');\r\n                                e.event = that._handleDefaultClick;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                }else{\r\n                    let event = customButtonData.event\r\n                    const button = buttonNodes[0];\r\n\r\n                    if(Array.isArray(customButtonData)){\r\n                        event = customButtonData[0].event;\r\n                    }\r\n    \r\n                    if(!event || typeof event !== 'function' || event === ''){\r\n                        console.log('event가 비어있습니다. 기본이벤트로 대체합니다.');\r\n                        event = this._handleDefaultClick;\r\n                    }\r\n\r\n                    button.event = event;\r\n                    button.addEventListener('click', event);\r\n                }\r\n                \r\n            }else{\r\n                defaultButtonCaller.call(this);\r\n            }\r\n        \r\n            if(expire && expireData){\r\n                const expireBox = this.expireWrap.childNodes;\r\n    \r\n                if(expireBox.length > 1){\r\n                    Array.from(expireBox).map(({childNodes}) => {\r\n                        Array.from(childNodes).find(e => {\r\n                            if(e.tagName.toLowerCase() === 'input'){\r\n                                e.addEventListener('click', handleCheckbox);\r\n                            }\r\n                        });\r\n                    });\r\n    \r\n                    function handleCheckbox({ target }){\r\n                        const expire = this.LayerPopup.expireWrap.childNodes;\r\n    \r\n                        Array.from(expire).map(({childNodes}) => {\r\n                            Array.from(childNodes).find(e => {\r\n                                if(e.tagName.toLowerCase() === 'input' && e.id !== target.id) {\r\n                                    e.checked = false;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            if(expire && expireData){\r\n                if(expireData.length > 1) {\r\n                    return false;\r\n                }\r\n                \r\n                const expireBox = this.expireWrap.childNodes;\r\n                \r\n                Array.from(expireBox[0].childNodes).map((el) => {\r\n                    el.addEventListener('click', ({target}) => {\r\n                        if(target.tagName.toLowerCase() === 'input'){\r\n                            that._handleExpire(target.value);\r\n                            that.close();\r\n                        }\r\n                        \r\n                    });\r\n                });\r\n                \r\n            }\r\n        }\r\n\r\n        /**\r\n         * 기본 버튼 이벤트 호출러\r\n         * @this target\r\n         */\r\n        function defaultButtonCaller(){\r\n            const that = this;\r\n\r\n            if(this.buttonsWrap.childNodes.length > 1){\r\n                const buttons = this.buttonsWrap.childNodes;\r\n\r\n                Array.from(buttons).map(el => {\r\n                    el.addEventListener('click', that._handleDefaultClick);\r\n                    el.event = that._handleDefaultClick;\r\n                });\r\n            }\r\n        }\r\n    } // _attachEvent\r\n\r\n    /**\r\n     * 레이어팝입이 제공하는 기본 버튼에 대한 이벤트\r\n     * @param {MouseEvent} e.target 클릭한 버튼\r\n     */\r\n    _handleDefaultClick({ target }){\r\n        const {LayerPopup} = target;\r\n        const {options, expireWrap} = LayerPopup;\r\n        const {button, expire, expireData} = options;\r\n        const btnClass = target.classList.value;\r\n        let result = (btnClass.search('done') > 0) ? true : false;\r\n\r\n        if(button){\r\n            if(LayerPopup.callback && LayerPopup.callback !== ''){\r\n                LayerPopup.callback(result);\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            const expire = expireWrap.childNodes;\r\n                Array.from(expire).map(({childNodes}) => {\r\n                    Array.from(childNodes).map(e => {\r\n                        if(e.tagName.toLowerCase() === 'input'){\r\n                            if(e.checked && result){\r\n                                LayerPopup._handleExpire(e.value);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                });\r\n        }\r\n\r\n        LayerPopup.close();\r\n    }\r\n\r\n    /**\r\n     * 닫기 후 만료일 설정\r\n     * @this LayerPopup\r\n     * @param {string|number} day 만료 날짜\r\n     */\r\n    _handleExpire(day){        \r\n        const { className } = this.options;\r\n        let randomNumber = this._getRandomNumber();\r\n        \r\n        this.uniqueName = className + randomNumber;\r\n        this._setCookie(this.uniqueName, day);\r\n    }\r\n\r\n    /**\r\n     * 랜덤 번호 추출\r\n     * @return 랜덤 숫자 값\r\n     */\r\n    _getRandomNumber(){\r\n        let num = new Date().getMinutes();\r\n\r\n        let i = 0;\r\n        for(; i < 4; i++){\r\n            num += String(Math.floor(Math.random() * 9));  \r\n        }\r\n\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * 레이어 팝업 dim 배경 스크롤 처리\r\n     * @param {boolean} isState 레이어팝업 dim 배경 스크롤 유무\r\n     */\r\n    _setBodyScroll(isState){\r\n        if(isState){\r\n            document.body.style.removeProperty('overflow');\r\n\r\n        }else{\r\n            document.body.style.overflow = 'hidden';\r\n        }\r\n    }\r\n\r\n    /** \r\n     * 이벤트 해제\r\n     * @this LayerPopup\r\n     */\r\n    _dettachEvent(){\r\n        const buttonNodes = this.buttonsWrap.childNodes;\r\n            \r\n        Array.from(buttonNodes).map(el => {\r\n            el.removeEventListener('click', el.event);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 쿠키 세팅\r\n     * @param {string} value 쿠키 저장할 value\r\n     * @param {string | number} days 쿠키 저장 날짜\r\n     * @example\r\n     * this._setCookie('레이어팝업123', 7);\r\n     */\r\n    _setCookie(value, days){\r\n        const date = new Date();\r\n\r\n        date.setDate(date.getDate() + Number(days));\r\n        document.cookie = this.uniqueName + \"=\" + escape(value) + \"; path=/; expires=\" + date.toUTCString() + \";\"\r\n    }\r\n\r\n    /**\r\n     * 저장한 쿠키 가져오기\r\n     * @param {string} name 쿠키 이름 \r\n     * @return 쿠키 값\r\n     * @throws 쿠키 값이 없으면 null 리턴\r\n     * @example\r\n     * this._getCookie('레이어팝업123')\r\n     */\r\n    _getCookie(name){\r\n        const value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n        return value ? value[2] : null;\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 오픈, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     * @example\r\n     * const defaultPopup = new LayerPopup();\r\n     * target.addEventListener('click', () => {\r\n     *      defaultPopup.open();\r\n     * });\r\n     */\r\n    open(){\r\n        if(this.uniqueName && this._getCookie(this.uniqueName)){\r\n            console.log(this.uniqueName,'로 쿠키 적용 중입니다.');\r\n\r\n        }else{\r\n            const {dim, scroll} = this.options; \r\n\r\n            if(!scroll){\r\n                this._setBodyScroll(false);\r\n            }\r\n\r\n            setZindex.call(this);\r\n            \r\n            if(dim && this.dim) {\r\n                this.dim.classList.add('on');\r\n            }\r\n            \r\n            this.wrap.classList.add('on');\r\n\r\n            /**\r\n             * zindex 설정\r\n             * @throws 기존에 열려있는 팝업이 있으면 값 조정 [기존 zindex + 오픈된 레이어팝업 갯수]\r\n             */\r\n            function setZindex(){\r\n                const otherPopup = document.querySelectorAll('[data-type=\"layerPopup\"].on');\r\n\r\n                if(otherPopup){\r\n                    if(!this.wrap.classList.contains('on')){\r\n                        this.wrap.style.zIndex =  Number(this.wrap.style.zIndex) + Number(otherPopup.length);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 팝업 닫기, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     * @param {boolean} isExpireState 만료일 설정이 되었으면 true, 아니면 false\r\n     */\r\n    close(isExpireState){\r\n        const {expireWrap} = this;\r\n        const {dim, scroll, expire, expireData} = this.options;\r\n\r\n        if(!scroll){\r\n            this._setBodyScroll(true);\r\n        }\r\n\r\n        this.wrap.style.zIndex = 1000;\r\n        this.wrap.classList.remove('on');\r\n\r\n        if(dim && this.dim) {\r\n            const layer = document.querySelectorAll('[data-type=\"layerPopup\"]');\r\n            let i = 0;\r\n\r\n            // 팝업이 여러개일때 딤처리\r\n            Array.from(layer).map(({classList}) => {\r\n                if(!classList.contains('on')){\r\n                    i ++;\r\n                }\r\n            });\r\n\r\n            if(layer.length === i){\r\n                this.dim.classList.remove('on');\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            _resetChecked(this);\r\n\r\n            /**\r\n             * 체크박스 리셋상태로 전환\r\n             * @param {object} LayerPopup 레이어팝업 객체\r\n             */\r\n            function _resetChecked(LayerPopup){\r\n                const child = expireWrap.childNodes;\r\n                Array.from(child).map(({childNodes}) => {\r\n                    Array.from(childNodes).map(e => {\r\n                        if(e.tagName.toLowerCase() === 'input' && e.checked){\r\n                            e.checked = false;\r\n\r\n                            if(isExpireState){\r\n                                LayerPopup._handleExpire(e.value);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n\r\n            } \r\n        }\r\n    }    \r\n\r\n    /**\r\n     * 레이어팝업 관련 객체들 삭제, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     */\r\n    remove(){\r\n        const otherPopup = document.querySelectorAll('[data-type=\"layerPopup\"].on');\r\n\r\n        if(otherPopup){\r\n            this.dim.remove();\r\n        }\r\n\r\n        this._dettachEvent();\r\n        this.wrap.remove();\r\n\r\n        this.name,\r\n        this.options,\r\n        this.callback,\r\n        this.dim,\r\n        this.wrap,\r\n        this.wrapInner,\r\n        this.header,\r\n        this.container,\r\n        this.footer,\r\n        this.content,\r\n        this.title,\r\n        this.closeButton,\r\n        this.buttonsWrap,\r\n        this.done,\r\n        this.cancel,\r\n        this.expireWrap,\r\n        this.uniqueName = null;\r\n    }  \r\n}"],"sourceRoot":"../assets"}