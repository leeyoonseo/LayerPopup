{"version":3,"sources":["layerPopup.js"],"names":["LayerPopup","parameters","callbackFunc","type","_classCallCheck","this","name","options","appendPosition","className","title","content","button","dim","scroll","expire","expireData","date","id","closeButtonData","src","label","customButton","customButtonData","event","Object","assign","callback","console","_this","_this$options","closeButton","_createElement","container","tag","document","querySelector","header","closeLabel","buttonsWrap","that","defaultButtons","Array","_getRandomNumber","length","map","e","key","el","call","append","isArray","btn","expireWrap","expireBtn","expireBox","expireLabel","prefix","_ref","text","_setAttribute","done","cancel","_ref2$tag","_ref2","_ref2$type","_ref2$label","createElement","splitClassName","split","classList","add","innerText","setAttribute","style","backgroundImage","dataset","_this$wrap","wrap","zIndex","_this$options2","footer","wrapInner","_setContent","target","body","_this$options3","outputTitle","outputContent","wordBreak","org","arguments","undefined","dest","innerHTML","_this2","_this$options4","addEventListener","close","buttonNodes","childNodes","defaultButtonCaller","from","find","log","_handleDefaultClick","_ref4","_ref5","tagName","toLowerCase","checked","_ref3","handleCheckbox","_ref6","_handleExpire","value","buttons","_ref7","result","search","_ref8","btnClass","randomNumber","num","getMinutes","i","Math","random","isState","removeProperty","overflow","_setCookie","uniqueName","removeEventListener","String","Date","getDate","Number","days","cookie","escape","toUTCString","match","_getCookie","_this$options5","_setBodyScroll","otherPopup","querySelectorAll","contains","isExpireState","child","_this$options6","remove","layer","setZindex","_ref9","_ref10","_dettachEvent"],"mappings":"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","file":"layerPopup.min.js","sourcesContent":["// dev 옵션 - min파일에서 디버깅\r\n// require('source-map-support').install();\r\n/**\r\n * @author yoonseo.lee <okayoon.lee@gmail.com>\r\n * @version 1.0.0\r\n * @since 2019.11\r\n * @file 레이어팝업 플러그인\r\n * @copyright yoonseo.lee 2019.11\r\n */\r\n class LayerPopup{\r\n\r\n    /**\r\n     * 레이어팝업 \r\n     * @classdesc 생성, 삽입, 삭제, 커스텀이 가능한 레이어팝업 모듈\r\n     * @param {object} parameters - 옵션 \r\n     * @param {requestCallback} callbackFunc - 기본 버튼 클릭 시 실행될 콜백함수 \r\n     */\r\n    constructor(parameters, callbackFunc){\r\n        \r\n        /**\r\n         * @prop {string} name 클래스 생성자 이름\r\n         */\r\n        this.name = \"LayerPopup\";        \r\n\r\n        /**\r\n         * @abstract\r\n         * @prop {object} options 클래스 옵션 오브젝트 \r\n         * @prop {string} options.appendPosition 팝업이 삽입될 상위 객체의 tagName or id or class\r\n         * @prop {string} options.className 팝업의 클래스명\r\n         * @prop {string} options.title 타이틀 문구 \r\n         * @prop {string|object} options.content 내부 콘텐츠  \r\n         * @prop {boolean} options.button 기본 버튼 사용여부 \r\n         * @prop {boolean} options.dim 딤 배경처리 사용여부\r\n         * @prop {boolean} options.scroll 딤 배경처리 시 스크롤 사용여부\r\n         * @prop {boolean} options.expire 만료일 사용여부\r\n         * @prop {object} options.expireData 만료일 관련 데이터 \r\n         * @prop {string|number} options.expireData.date 만료일 날짜 \r\n         * @prop {string} options.expireData.id 만료일 체크 객체 id \r\n         * @prop {string} options.expireData.label 만료일 체크 label 문구\r\n         * @prop {boolean} options.closeButton 닫기 버튼 사용여부\r\n         * @prop {object} options.closeButtonData 닫기버튼 데이터 \r\n         * @prop {string} options.closeButtonData.src 닫기버튼 이미지 처리시 src \r\n         * @prop {string} options.closeButtonData.label 닫기버튼명\r\n         * @prop {boolean} options.customButton 커스텀 버튼 사용여부\r\n         * @prop {object} options.customButtonData 커스텀 버튼 데이터 \r\n         * @prop {string} options.customButtonData.type 커스텀 버튼 타입 \r\n         * @prop {string} options.customButtonData.className 커스텀 버튼 클래스 \r\n         * @prop {string} options.customButtonData.label 커스텀 버튼 label\r\n         * @prop {string|object} options.customButtonData.event 커스텀 버튼 클릭시 커스텀 이벤트\r\n         */\r\n        this.options = {\r\n            appendPosition : 'body', \r\n            className : 'popup', \r\n            title : 'title',\r\n            content : 'please write your message...',\r\n            \r\n            button : true,\r\n            dim : true,\r\n            scroll : true,\r\n            \r\n            expire : false,           \r\n            expireData : {\r\n                date : 1,\r\n                id : 'day',\r\n                label : '하루동안보지않기'\r\n            },\r\n\r\n            closeButton : true,\r\n            closeButtonData : {\r\n                src : '',\r\n                label : 'x'\r\n            },\r\n\r\n            customButton : false,\r\n            customButtonData : [\r\n                {\r\n                    type : '',\r\n                    className : '',\r\n                    label : '',\r\n                    event : '',\r\n                }\r\n            ]\r\n        };\r\n\r\n        if(parameters){\r\n            if(typeof parameters === 'object'){\r\n                this.options = Object.assign({}, this.options, parameters);\r\n                this.callback = callbackFunc || '';\r\n    \r\n            }else if(typeof parameters === 'function'){\r\n                this.callback = parameters;\r\n    \r\n            }else{\r\n                console.log('error : 옵션 값을 확인해주세요.');\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        this._initialize();\r\n    }   \r\n\r\n    /**\r\n     * 레이어 팝업 객체 생성 및 삽입 컨트롤\r\n     * @this LayerPopup\r\n     */\r\n    _initialize(){\r\n        const {\r\n            className, \r\n            closeButton, \r\n            closeButtonData, \r\n            button, \r\n            customButton,\r\n            title, \r\n            dim, \r\n            expire, \r\n            expireData\r\n        } = this.options;\r\n\r\n        const _createElement = this._createElement;\r\n\r\n        this.wrap = _createElement({\r\n            className : className + '_wrap'\r\n        });    \r\n\r\n        this.wrapInner = _createElement({\r\n            className : className + '_inner'\r\n        });           \r\n\r\n        this.container = _createElement({\r\n            className : className + '_container'\r\n        });        \r\n\r\n        this.content = _createElement({\r\n            tag : 'div', \r\n            className : className + '_content'\r\n        });\r\n        \r\n        this.dim = document.querySelector('[data-type=\"dim\"]');\r\n\r\n        if(dim && !this.dim) {\r\n            this.dim = _createElement({\r\n                className : className + '_dim' \r\n            });\r\n        }\r\n\r\n        if(title || closeButton){\r\n            this.header = _createElement({\r\n                className : className + '_header'\r\n            });\r\n        }\r\n\r\n        if(title) {\r\n            this.title = _createElement({\r\n                tag : 'p', \r\n                className : className + '_title'\r\n            });\r\n        }\r\n\r\n        if(closeButton){\r\n            const closeLabel = (closeButtonData.label === '') \r\n                ? 'x' \r\n                : closeButtonData.label;\r\n\r\n            this.closeButton = _createElement({\r\n                tag : 'button',\r\n                className : className + '_close',\r\n                label : closeLabel,\r\n                src : closeButtonData.src\r\n            });\r\n        }\r\n\r\n        if(button || expire){\r\n            this.buttonsWrap = _createElement({\r\n                tag : 'div', \r\n                className : className + '_buttons_wrap'\r\n            });\r\n\r\n            this.footer = _createElement({\r\n                className : className + '_footer'\r\n            });\r\n        }\r\n\r\n        if(button){\r\n            if(customButton){\r\n                const that = this;\r\n                const {customButtonData} = this.options;\r\n    \r\n                if(customButtonData === ''){\r\n                    defaultButtons.call(this);\r\n    \r\n                }else if(Array.isArray(customButtonData) && customButtonData.length > 1){\r\n                    customButtonData.map(e => {\r\n                        let key = this._getRandomNumber();\r\n                        e.key = key;\r\n    \r\n                        let el = _createElement.call(that, { \r\n                            tag : 'button', \r\n                            type : e.type, \r\n                            className : (e.className) ? e.className : key,                         \r\n                            label : e.label\r\n                        });\r\n    \r\n                        that.buttonsWrap.append(el);\r\n                    });                \r\n    \r\n                }else{\r\n                    const key = this._getRandomNumber();\r\n                    let btn = (Array.isArray(customButtonData)) \r\n                        ? customButtonData[0] \r\n                        : customButtonData;\r\n                    const {type, className, label, event} = btn;\r\n                    btn.key = key;\r\n\r\n                    const el = _createElement.call(this, { \r\n                        tag : 'button', \r\n                        type : type, \r\n                        className : (className) ? className : key, \r\n                        label : label\r\n                    });\r\n                    \r\n                    this.buttonsWrap.append(el);\r\n                }\r\n    \r\n            }else{\r\n                defaultButtons.call(this);\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            const {className} = this.options;\r\n            const prefix = className + '_expire';\r\n            let expireBox, \r\n                expireBtn, \r\n                expireLabel;\r\n\r\n            this.expireWrap = _createElement.call(this,{\r\n                tag : 'div',\r\n                className : prefix + '_wrap'\r\n            });\r\n\r\n            if(Array.isArray(expireData)){\r\n                const that = this;\r\n\r\n                expireData.map(({className, id, date, label}) => {\r\n                    expireBox = _createElement.call(that, {\r\n                        tag : 'p', \r\n                        className : prefix + '_box'\r\n                    }); \r\n\r\n                    expireBtn = _createElement.call(that, {\r\n                        tag : 'input',\r\n                        type : 'checkbox', \r\n                        name : prefix + '_chk', \r\n                        className : className, \r\n                        id : id,\r\n                        label : date\r\n                    });\r\n\r\n                    expireLabel = _createElement.call(that,{\r\n                        tag : 'label',\r\n                        label : prefix + '_label', \r\n                        id : id,\r\n                        text : label\r\n                    });\r\n\r\n                    expireBox.append(expireBtn, expireLabel);\r\n                    this.expireWrap.append(expireBox);\r\n                });\r\n\r\n            }else{\r\n                expireBox = _createElement.call(this, {\r\n                    tag : 'p',\r\n                    className : prefix + '_box'\r\n                });\r\n\r\n                expireBtn = _createElement.call(this,{\r\n                    tag : 'input',\r\n                    type : 'checkbox', \r\n                    className : prefix + '_chk', \r\n                    id : expireData.id,\r\n                    label : expireData.date\r\n                });\r\n\r\n                expireLabel = _createElement.call(this, {\r\n                    tag : 'label',\r\n                    label : prefix + '_label', \r\n                    id : expireData.id,\r\n                    text : expireData.label\r\n                });\r\n\r\n                expireBox.append(expireBtn, expireLabel);\r\n                this.expireWrap.append(expireBox);\r\n            }\r\n        } // expired\r\n\r\n        this._setAttribute();\r\n        this._layoutAppend(); \r\n\r\n\r\n        // 기본 버튼 생성(확인, 취소)\r\n        function defaultButtons(){\r\n            this.done = _createElement.call(this, {\r\n                tag : 'button', \r\n                className : className + '_button_done', \r\n                type : 'submit',\r\n                label : 'confirm'\r\n            });\r\n\r\n            this.cancel = _createElement.call(this, {\r\n                tag : 'button', \r\n                className : className + '_button_cancel', \r\n                label : 'cancel'\r\n            });\r\n\r\n            this.buttonsWrap.append(this.done, this.cancel);\r\n        }\r\n    } // initialize\r\n\r\n\r\n    /**\r\n     * 객체 생성하는 함수, 버튼 생성할때는 호출 시 .call(this) 바인딩해줘야 함.\r\n     * @param {string} tag 객체 tagName (default = div)\r\n     * @param {string} id 객체 id\r\n     * @param {string} className  객체 class\r\n     * @param {string} name 객체 name\r\n     * @param {string} type 객체 종류 (default = button)\r\n     * @param {label} label label 텍스트 (default = 버튼)\r\n     * @param {string} src 버튼 이미지 주소\r\n     * @param {string} text 버튼 텍스트\r\n     * @return {object} 레이어팝업 객체\r\n     * @example\r\n     * title = _createElement({ \r\n     *      tag : 'p', \r\n     *      className : 'title,title-red,title-required' \r\n     * });\r\n     *      \r\n     * button = _createElement.call(this,{ \r\n     *      tag : 'button', \r\n     *      className : 'cancel',\r\n     *      type : 'button', \r\n     *      label : '취소버튼' \r\n     * });\r\n     */\r\n    _createElement({ \r\n        tag = 'div', \r\n        id, \r\n        className, \r\n        name, \r\n        type = 'button', \r\n        label = '버튼', \r\n        src,\r\n        text\r\n    }){\r\n\r\n        const el = document.createElement(tag);\r\n\r\n        if(className){\r\n            const splitClassName = className.split(',');\r\n\r\n            if(splitClassName.length > 1){\r\n                splitClassName.map(e =>  el.classList.add(e));\r\n\r\n            }else{\r\n                el.classList.add(className);\r\n            }\r\n        }\r\n\r\n        if(name){\r\n            el.name = name;\r\n        }\r\n\r\n        if(id && tag !== 'label'){\r\n            el.id = id;\r\n        }\r\n\r\n        if(tag === 'label' && text){\r\n            el.innerText = text;\r\n        }\r\n        \r\n        if(tag === 'button'){   \r\n            el.setAttribute('type', (type !== '') ? type : 'button');\r\n            el.LayerPopup = this;\r\n            el.innerText = (label !== '') ? label : '버튼';\r\n            \r\n            if(src && src !== ''){\r\n                el.style.backgroundImage = 'url(' + src + ')';\r\n                el.classList.add('bg');\r\n            }\r\n        }\r\n\r\n        if(expire){\r\n            if(type === 'radio' || type === 'checkbox'){\r\n                el.value = label;\r\n                el.setAttribute('type', type);\r\n                el.dataset.type = 'expired';\r\n                el.LayerPopup = this;\r\n            }\r\n            \r\n            if(tag === 'label'){       \r\n                el.setAttribute('for', id);\r\n            }\r\n        }\r\n\r\n        return el;\r\n    } // _createElement\r\n\r\n\r\n    /**\r\n     * 옵션에 따라 객체 속성 컨트롤\r\n     * @this LayerPopup\r\n     */\r\n    _setAttribute(){\r\n        const {dim} = this.options;\r\n        const {style, dataset} = this.wrap;\r\n\r\n        style.zIndex = 1000;\r\n        dataset.type = 'layerPopup';\r\n\r\n        if(dim) {\r\n            this.dim.dataset.type = 'dim';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 객체 삽입하는 함수\r\n     * @throws 선언 순서가 변경되면 안됨\r\n     */\r\n    _layoutAppend(){\r\n        const { appendPosition, title, dim, closeButton, button, expire, expireData} = this.options;\r\n\r\n        if(title){\r\n            this.header.append(this.title);\r\n        }\r\n\r\n        if(closeButton){\r\n            this.header.append(this.closeButton);\r\n        }\r\n\r\n        this.container.append(this.content);\r\n        \r\n        if(expire && expireData){\r\n            this.footer.append(this.expireWrap);\r\n        }\r\n\r\n        if(button || expire){\r\n            this.footer.append(this.buttonsWrap);\r\n        }\r\n\r\n        if(this.header){\r\n            this.wrapInner.append(this.header); \r\n        }\r\n\r\n        this.wrapInner.append(this.container); \r\n\r\n        if(button || expire){\r\n            this.wrapInner.append(this.footer); \r\n        }\r\n\r\n        this.wrap.append(this.wrapInner);\r\n        \r\n        this._setContent();\r\n        this._attachEvent();\r\n\r\n        if(appendPosition !== ''){\r\n            let target = document.querySelector(appendPosition); \r\n            if(target === '' || !target) {\r\n                target = document.querySelector('body');\r\n            }\r\n\r\n            target.append(this.wrap);\r\n        }\r\n\r\n        if(dim && this.dim) document.body.append(this.dim);\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 타이틀, 내부 콘텐츠 세팅해주는 함수\r\n     */\r\n    _setContent(){\r\n        const {title, content} = this.options;\r\n        let outputContent = content;\r\n        let outputTitle = content;\r\n\r\n        if(title) {\r\n            if(typeof title === 'string'){\r\n                outputTitle = wordBreak(title);\r\n                this.title.innerHTML = outputTitle;\r\n\r\n            }else{\r\n                this.title.append(outputTitle);\r\n            }\r\n        }\r\n\r\n        if(typeof content === 'string'){\r\n            outputContent = wordBreak(content);\r\n            this.content.innerHTML = outputContent;\r\n\r\n        }else{\r\n            this.content.append(outputContent);\r\n        }\r\n\r\n        /**\r\n         *  \\n를 <br>로 변환\r\n         * @param {string} text 줄바꿈 치환이 필요한 텍스트\r\n         * @param {string} org 기존 치환 문구\r\n         * @param {string} dest 치환되어야할 문구\r\n         * @return {string} (default) js 줄바꿈을 html 줄바꿈으로 치환한 텍스트\r\n         */\r\n        function wordBreak(text, org = '\\n', dest = '<br>'){\r\n            return text.split(org).join(dest);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 레이어 팝업 객체 이벤트 바인딩하는 함수\r\n     * @this LayerPopup\r\n     */\r\n    _attachEvent(){\r\n        const that = this;\r\n        const {closeButton, customButton, button, customButtonData, expire, expireData} = this.options;\r\n\r\n        if(closeButton){\r\n            this.closeButton.addEventListener('click', () => {\r\n                this.close();\r\n            });\r\n        }\r\n\r\n        if(button){\r\n            const buttonNodes = this.buttonsWrap.childNodes;        \r\n\r\n            if(customButton){\r\n                if(customButtonData === ''){\r\n                    defaultButtonCaller.call(this);\r\n    \r\n                }else if(customButtonData.length > 1){\r\n                    Array.from(buttonNodes).map(el => {\r\n                        customButtonData.find((e) => {\r\n                            if(e.event && typeof e.event === 'function'){\r\n                                if(el.className === e.key || el.className === e.className){\r\n                                    el.addEventListener('click', e.event);\r\n                                    el.event = e.event;\r\n                                }\r\n    \r\n                            }else{\r\n                                console.log('event가 비어있습니다. 기본이벤트로 대체합니다.');\r\n                                e.event = that._handleDefaultClick;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                }else{\r\n                    let event = customButtonData.event\r\n                    const button = buttonNodes[0];\r\n\r\n                    if(Array.isArray(customButtonData)){\r\n                        event = customButtonData[0].event;\r\n                    }\r\n    \r\n                    if(!event || typeof event !== 'function' || event === ''){\r\n                        console.log('event가 비어있습니다. 기본이벤트로 대체합니다.');\r\n                        event = this._handleDefaultClick;\r\n                    }\r\n\r\n                    button.event = event;\r\n                    button.addEventListener('click', event);\r\n                }\r\n                \r\n            }else{\r\n                defaultButtonCaller.call(this);\r\n            }\r\n        \r\n            if(expire && expireData){\r\n                const expireBox = this.expireWrap.childNodes;\r\n    \r\n                if(expireBox.length > 1){\r\n                    Array.from(expireBox).map(({childNodes}) => {\r\n                        Array.from(childNodes).find(e => {\r\n                            if(e.tagName.toLowerCase() === 'input'){\r\n                                e.addEventListener('click', handleCheckbox);\r\n                            }\r\n                        });\r\n                    });\r\n    \r\n                    function handleCheckbox({ target }){\r\n                        const expire = this.LayerPopup.expireWrap.childNodes;\r\n    \r\n                        Array.from(expire).map(({childNodes}) => {\r\n                            Array.from(childNodes).find(e => {\r\n                                if(e.tagName.toLowerCase() === 'input' && e.id !== target.id) {\r\n                                    e.checked = false;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            if(expire && expireData){\r\n                if(expireData.length > 1) {\r\n                    return false;\r\n                }\r\n                \r\n                const expireBox = this.expireWrap.childNodes;\r\n                \r\n                Array.from(expireBox[0].childNodes).map((el) => {\r\n                    el.addEventListener('click', ({target}) => {\r\n                        if(target.tagName.toLowerCase() === 'input'){\r\n                            that._handleExpire(target.value);\r\n                            that.close();\r\n                        }\r\n                        \r\n                    });\r\n                });\r\n                \r\n            }\r\n        }\r\n\r\n        /**\r\n         * 기본 버튼 이벤트 호출러\r\n         * @this target\r\n         */\r\n        function defaultButtonCaller(){\r\n            const that = this;\r\n\r\n            if(this.buttonsWrap.childNodes.length > 1){\r\n                const buttons = this.buttonsWrap.childNodes;\r\n\r\n                Array.from(buttons).map(el => {\r\n                    el.addEventListener('click', that._handleDefaultClick);\r\n                    el.event = that._handleDefaultClick;\r\n                });\r\n            }\r\n        }\r\n    } // _attachEvent\r\n\r\n    /**\r\n     * 레이어팝입이 제공하는 기본 버튼에 대한 이벤트\r\n     * @param {MouseEvent} e.target 클릭한 버튼\r\n     */\r\n    _handleDefaultClick({ target }){\r\n        const {LayerPopup} = target;\r\n        const {options, expireWrap} = LayerPopup;\r\n        const {button, expire, expireData} = options;\r\n        const btnClass = target.classList.value;\r\n        let result = (btnClass.search('done') > 0) ? true : false;\r\n\r\n        if(button){\r\n            if(LayerPopup.callback && LayerPopup.callback !== ''){\r\n                LayerPopup.callback(result);\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            const expire = expireWrap.childNodes;\r\n                Array.from(expire).map(({childNodes}) => {\r\n                    Array.from(childNodes).map(e => {\r\n                        if(e.tagName.toLowerCase() === 'input'){\r\n                            if(e.checked && result){\r\n                                LayerPopup._handleExpire(e.value);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                });\r\n        }\r\n\r\n        LayerPopup.close();\r\n    }\r\n\r\n    /**\r\n     * 닫기 후 만료일 설정\r\n     * @this LayerPopup\r\n     * @param {string|number} day 만료 날짜\r\n     */\r\n    _handleExpire(day){        \r\n        const { className } = this.options;\r\n        let randomNumber = this._getRandomNumber();\r\n        \r\n        this.uniqueName = className + randomNumber;\r\n        this._setCookie(this.uniqueName, day);\r\n    }\r\n\r\n    /**\r\n     * 랜덤 번호 추출\r\n     * @return 랜덤 숫자 값\r\n     */\r\n    _getRandomNumber(){\r\n        let num = new Date().getMinutes();\r\n\r\n        let i = 0;\r\n        for(; i < 4; i++){\r\n            num += String(Math.floor(Math.random() * 9));  \r\n        }\r\n\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * 레이어 팝업 dim 배경 스크롤 처리\r\n     * @param {boolean} isState 레이어팝업 dim 배경 스크롤 유무\r\n     */\r\n    _setBodyScroll(isState){\r\n        if(isState){\r\n            document.body.style.removeProperty('overflow');\r\n\r\n        }else{\r\n            document.body.style.overflow = 'hidden';\r\n        }\r\n    }\r\n\r\n    /** \r\n     * 이벤트 해제\r\n     * @this LayerPopup\r\n     */\r\n    _dettachEvent(){\r\n        const buttonNodes = this.buttonsWrap.childNodes;\r\n            \r\n        Array.from(buttonNodes).map(el => {\r\n            el.removeEventListener('click', el.event);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 쿠키 세팅\r\n     * @param {string} value 쿠키 저장할 value\r\n     * @param {string | number} days 쿠키 저장 날짜\r\n     * @example\r\n     * this._setCookie('레이어팝업123', 7);\r\n     */\r\n    _setCookie(value, days){\r\n        const date = new Date();\r\n\r\n        date.setDate(date.getDate() + Number(days));\r\n        document.cookie = this.uniqueName + \"=\" + escape(value) + \"; path=/; expires=\" + date.toUTCString() + \";\"\r\n    }\r\n\r\n    /**\r\n     * 저장한 쿠키 가져오기\r\n     * @param {string} name 쿠키 이름 \r\n     * @return 쿠키 값\r\n     * @throws 쿠키 값이 없으면 null 리턴\r\n     * @example\r\n     * this._getCookie('레이어팝업123')\r\n     */\r\n    _getCookie(name){\r\n        const value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n        return value ? value[2] : null;\r\n    }\r\n\r\n    /**\r\n     * 레이어팝업 오픈, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     * @example\r\n     * const defaultPopup = new LayerPopup();\r\n     * target.addEventListener('click', () => {\r\n     *      defaultPopup.open();\r\n     * });\r\n     */\r\n    open(){\r\n        if(this.uniqueName && this._getCookie(this.uniqueName)){\r\n            console.log(this.uniqueName,'로 쿠키 적용 중입니다.');\r\n\r\n        }else{\r\n            const {dim, scroll} = this.options; \r\n\r\n            if(!scroll){\r\n                this._setBodyScroll(false);\r\n            }\r\n\r\n            setZindex.call(this);\r\n            \r\n            if(dim && this.dim) {\r\n                this.dim.classList.add('on');\r\n            }\r\n            \r\n            this.wrap.classList.add('on');\r\n\r\n            /**\r\n             * zindex 설정\r\n             * @throws 기존에 열려있는 팝업이 있으면 값 조정 [기존 zindex + 오픈된 레이어팝업 갯수]\r\n             */\r\n            function setZindex(){\r\n                const otherPopup = document.querySelectorAll('[data-type=\"layerPopup\"].on');\r\n\r\n                if(otherPopup){\r\n                    if(!this.wrap.classList.contains('on')){\r\n                        this.wrap.style.zIndex =  Number(this.wrap.style.zIndex) + Number(otherPopup.length);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 팝업 닫기, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     * @param {boolean} isExpireState 만료일 설정이 되었으면 true, 아니면 false\r\n     */\r\n    close(isExpireState){\r\n        const {expireWrap} = this;\r\n        const {dim, scroll, expire, expireData} = this.options;\r\n\r\n        if(!scroll){\r\n            this._setBodyScroll(true);\r\n        }\r\n\r\n        this.wrap.style.zIndex = 1000;\r\n        this.wrap.classList.remove('on');\r\n\r\n        if(dim && this.dim) {\r\n            const layer = document.querySelectorAll('[data-type=\"layerPopup\"]');\r\n            let i = 0;\r\n\r\n            // 팝업이 여러개일때 딤처리\r\n            Array.from(layer).map(({classList}) => {\r\n                if(!classList.contains('on')){\r\n                    i ++;\r\n                }\r\n            });\r\n\r\n            if(layer.length === i){\r\n                this.dim.classList.remove('on');\r\n            }\r\n        }\r\n\r\n        if(expire && expireData){\r\n            _resetChecked(this);\r\n\r\n            /**\r\n             * 체크박스 리셋상태로 전환\r\n             * @param {object} LayerPopup 레이어팝업 객체\r\n             */\r\n            function _resetChecked(LayerPopup){\r\n                const child = expireWrap.childNodes;\r\n                Array.from(child).map(({childNodes}) => {\r\n                    Array.from(childNodes).map(e => {\r\n                        if(e.tagName.toLowerCase() === 'input' && e.checked){\r\n                            e.checked = false;\r\n\r\n                            if(isExpireState){\r\n                                LayerPopup._handleExpire(e.value);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n\r\n            } \r\n        }\r\n    }    \r\n\r\n    /**\r\n     * 레이어팝업 관련 객체들 삭제, 외부 접근자 함수\r\n     * @this LayerPopup\r\n     */\r\n    remove(){\r\n        const otherPopup = document.querySelectorAll('[data-type=\"layerPopup\"].on');\r\n\r\n        if(otherPopup){\r\n            this.dim.remove();\r\n        }\r\n\r\n        this._dettachEvent();\r\n        this.wrap.remove();\r\n\r\n        this.name,\r\n        this.options,\r\n        this.callback,\r\n        this.dim,\r\n        this.wrap,\r\n        this.wrapInner,\r\n        this.header,\r\n        this.container,\r\n        this.footer,\r\n        this.content,\r\n        this.title,\r\n        this.closeButton,\r\n        this.buttonsWrap,\r\n        this.done,\r\n        this.cancel,\r\n        this.expireWrap,\r\n        this.uniqueName = null;\r\n    }  \r\n}"],"sourceRoot":"../assets"}